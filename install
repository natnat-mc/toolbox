#!/usr/bin/env lua

require 'future'
require 'interactive'

-- read arguments
local args={...}
local installdir=args[1] or io.popen('echo -n "$HOME"'):read('*a')..'/bin'

-- make sure it's what the user wants
io.write("Installing in \""..installdir.."\"\n")
if not prompt("Is this okay?", true) then
	os.exit(0)
end

-- create the directory if it doesn't exist
if not os.execute('[ -d "'..installdir..'" ]') then
	if not prompt("Install directory doesn't exist. Create it?", true) then
		os.exit(0)
	end
	if not os.execute('mkdir -p "'..installdir..'"') then
		io.stderr:write "Directory creation failed\n"
		os.exit(1)
	end
end

-- check if the install directory is in the path
-- check the Lua version
local defaultversion=tonumber(_VERSION:match('%d.%d+'))
do
	local randomname='toolboxcheck'..math.random()
	local fd=io.open(installdir..'/'..randomname, 'w')
	fd:write([[
#!/usr/bin/env lua
io.write("IT WORKS\n")
io.write(_VERSION:match('%d%.%d+'))
]])
	fd:close()
	os.execute('chmod 700 "'..installdir..'/'..randomname..'"')
	local getline=io.popen(randomname):lines()
	if getline()~="IT WORKS" then
		if prompt "Directory is not in path, add it?" then
			os.execute 'echo >> ~/.profile'
			os.execute("echo 'export PATH=\""..installdir..":$PATH\"' >> ~/.profile")
		end
	else
		-- the path is already set
		-- check the Lua version
		defaultversion=tonumber(getline())
		getline()
		
		io.write "Install directory is already in path\n" 
		io.write("Lua version is "..(defaultversion or 'unknown').."\n")
	end
	os.remove(installdir..'/'..randomname)
end

-- check if we have to rewrite the scripts
local rewrite={}
if defaultversion~=5.3 then
	io.write "Lua version is not 5.3, which could cause compatibility issues\n"
	
	-- get ourselves a list of options
	local options={
		"continue",
		"abort",
		"package future lib inside scripts"
	}
	
	-- check if we have toolbox-lua available
	if os.execute 'which toolbox-lua > /dev/null' then
		io.write "However, toolbox-lua has been found on your machine and can be used\n"
		table.insert(options, "use toolbox-lua")
	else
		table.insert(options, "install lua5.3 as toolbox-lua")
	end
	
	-- check if we have lua5.3 available
	if os.execute "which lua5.3 > /dev/null" then
		io.write "However, lua5.3 is available and can be used\n"
		table.insert(options, "use lua5.3")
	else
		table.insert(options, "install lua5.3")
		table.insert(options, "install lua5.3 as default lua")
	end
	
	local ans=options[ask("What do you want to do?", options)]
	if ans=="continue" then
		-- good luck
	elseif ans=="abort" then
		os.exit(0)
	elseif ans=="package future lib inside scripts" then
		rewrite.future=true
	elseif ans=="install lua5.3 as toolbox-lua" then
		rewrite.version='toolbox-lua'
		if not os.execute('./install5.3 "'..installdir..'" toolbox-') then
			io.stderr:write "Failed installing lua5.3 as toolbox-lua\n"
			os.exit(1)
		end
	elseif ans=="use toolbox-lua" then
		rewrite.version='toolbox-lua'
	elseif ans=="install lua5.3" then
		rewrite.version='lua5.3'
		if not os.execute('./install5.3 "'..installdir..'" "" 5.3') then
			io.stderr:write "Failed installing lua5.3\n"
			os.exit(1)
		end
	elseif ans=="install lua5.3 as default lua" then
		if not os.execute('./install5.3 "'..installdir..'"') then
			io.stderr:write "Failed installing lua5.3 as default lua\n"
			os.exit(1)
		end
	elseif ans=="use lua5.3" then
		rewrite.version='lua5.3'
	else
		io.stderr:write "Something went horribly wrong\n"
		os.exit(1)
	end
end

-- list everything we have to rewrite
if next(rewrite) then
	io.write "This script will apply the following changes to the binaries:\n"
	if rewrite.version then
		io.write "\tChange the shebang to force usage of "
		io.write(rewrite.version)
		io.write '\n'
	end
	if rewrite.future then
		io.write "\tEmbed the future lib inside the scripts\n"
	end
	if not prompt("Is this okay", true) then
		os.exit(0)
	end
end

-- function to install a script
local function install(script)
	if not next(rewrite) then
		return os.execute('cp -a "'..script..'" "'..installdir..'"')
	end
	local content={}
	for line in io.lines(script) do
		table.insert(content, line)
	end
	local output=installdir..'/'..script
	if rewrite.version then
		content[1]="#!/usr/bin/env "..rewrite.version
	end
	if rewrite.future then
		local fd=io.open 'future.lua'
		table.insert(content, 2, fd:read '*a')
		fd:close()
	end
	local fd=io.open(output, 'w')
	for i, line in ipairs(content) do
		fd:write(line)
		fd:write '\n'
	end
	fd:close()
	os.execute('chmod +x "'..output..'"')
	return true
end

-- install all scripts individually
local scripts={'=', 'ccx', 'makefilegen', 'todo', 'rep', 'roll', 'media', 'sys'}
for i, script in ipairs(scripts) do
	local skip=false
	if os.execute('[ -f "'..installdir..'/'..script..'" ]') then
		if not prompt("Script "..script.." is already present in "..installdir..", overwrite it?", false) then
			skip=true
		end
	end
	if not skip then
		if install(script) then
			io.write("Successfully installed "..script.."\n")
		else
			io.stderr:write("Failed installing "..script.."\n")
		end
	end
end
