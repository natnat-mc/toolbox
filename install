#!/usr/bin/env lua

require 'future'

-- ask the user a question
local function prompt(question, default)
	while true do
		io.write(question)
		io.write(" [")
		io.write(default and 'Y' or 'y')
		io.write("/")
		io.write(default and 'n' or 'N')
		io.write("] ")
		local ans=io.read('*l'):lower()
		if ans=='' then
			return default
		elseif ans=='y' then
			return true
		elseif ans=='n' then
			return false
		end
	end
end
local function ask(q, a)
	while true do
		io.write(q)
		io.write '\n'
		for i, v in ipairs(a) do
			io.write '\t'
			io.write(i)
			io.write ':\t'
			io.write(v)
			io.write '\n'
		end
		local line=tonumber(io.read '*l')
		if line and line==math.floor(line) and a[line] then
			return line, a[line]
		end
	end
end

-- read arguments
local args={...}
local installdir=args[1] or io.popen('echo -n "$HOME"'):read('*a')..'/bin'

-- make sure it's what the user wants
io.write("Installing in \""..installdir.."\"\n")
if not prompt("Is this okay?", true) then
	os.exit(0)
end

-- create the directory if it doesn't exist
if not os.execute('[ -d "'..installdir..'" ]') then
	if not prompt("Install directory doesn't exist. Create it?", true) then
		os.exit(0)
	end
	if not os.execute('mkdir -p "'..installdir..'"') then
		io.stderr:write "Directory creation failed\n"
		os.exit(1)
	end
end

-- check if the install directory is in the path
-- check the Lua version
local defaultversion=tonumber(_VERSION:match('%d.%d+'))
do
	local randomname='toolboxcheck'..math.random()
	local fd=io.open(installdir..'/'..randomname, 'w')
	fd:write([[
#!/usr/bin/env lua
io.write("IT WORKS\n")
io.write(_VERSION:match('%d%.%d+'))
]])
	fd:close()
	os.execute('chmod 700 "'..installdir..'/'..randomname..'"')
	local getline=io.popen(randomname):lines()
	if getline()~="IT WORKS" then
		if prompt "Directory is not in path, add it?" then
			os.execute 'echo >> ~/.profile'
			os.execute("echo 'export PATH=\""..installdir..":$PATH\"' >> ~/.profile")
		end
	else
		-- the path is already set
		-- check the Lua version
		defaultversion=tonumber(getline())
		getline()
		
		io.write "Install directory is already in path\n" 
		io.write("Lua version is "..(defaultversion or 'unknown').."\n")
	end
	os.remove(installdir..'/'..randomname)
end

-- check if we have to rewrite the scripts
local rewrite={}
if defaultversion~=5.3 then
	io.write "Lua version is not 5.3, which could cause compatibility issues\n"
	local ans=ask("What do you want to do?", {
		"nothing",
		"abort",
		"install future lib",
		"install Lua 5.3",
		"force Lua 5.3"
	})
	if ans==1 then
		-- good luck
	elseif ans==2 then
		os.exit(0)
	elseif ans==3 then
		rewrite.future=true
	elseif ans==4 then
		rewrite.version=true
		if not os.execute('install5.3') then
			io.stderr:write "Failed installing Lua 5.3\n"
			os.exit(1)
		end
	elseif ans==5 then
		rewrite.version=true
	end
end

-- list everything we have to rewrite
if next(rewrite) then
	io.write "This script will apply the following changes to the binaries:\n"
	if rewrite.version then
		io.write "\tChange the shebang to force usage of Lua 5.3\n"
	end
	if rewrite.future then
		io.write "\tEmbed the future lib inside the scripts\n"
	end
	if not prompt("Is this okay", true) then
		os.exit(0)
	end
end

-- install all scripts individually
local scripts={'=', 'ccx', 'makefilegen', 'todo'}
for i, script in ipairs(scripts) do
	local skip=false
	if os.execute('[ -f "'..installdir..'/'..script..'" ]') then
		if not prompt("Script "..script.." is already present in "..installdir..", overwrite it?", false) then
			skip=true
		end
	end
	if not skip then
		if os.execute('cp -a "'..script..'" "'..installdir..'"') then
			io.write("Successfully installed "..script.."\n")
		else
			io.stderr:write("Failed installing "..script.."\n")
		end
	end
end
